---
import Layout from "@/layouts/Layout.astro";
import { getCollection, render } from "astro:content";
import { formatDateLong } from "@/utils/time";
import { countWords, minutesToRead } from "@/utils/content";

export async function getStaticPaths() {
  const posts = await getCollection("posts");
  return posts.map((post) => ({
    params: { id: post.id },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await render(post);

const words = countWords(post.body ?? "");
const mins = minutesToRead(words);
---

<Layout title={post.data.title!} description={post.data.title!} keywords={[]} canonical={`/blog/${post.id}`}>
  <section class="mx-auto w-full max-w-7xl px-4 py-16 sm:px-6 lg:px-8">
    <article class="overflow-hidden rounded-xl border border-gray-200/60 bg-white/70 backdrop-blur dark:border-white/10 dark:bg-black/10">
      <header class="px-6 pt-6 sm:px-8 sm:pt-8">
        <h1 class="text-4xl font-extrabold tracking-tight">
          {post.data.title}
        </h1>
      </header>

      {
        post.data.cover && (
          <div class="mt-6 aspect-[16/9] w-full overflow-hidden">
            <img
              src={typeof post.data.cover === "string" ? post.data.cover : post.data.cover.src}
              alt={typeof post.data.cover === "string" ? "" : (post.data.cover.alt ?? "")}
              loading="eager"
              decoding="async"
              class="h-full w-full object-cover"
            />
          </div>
        )
      }

      <div class="px-6 sm:px-8">
        <div class="mt-4 flex flex-wrap items-center gap-x-3 gap-y-2 text-sm text-gray-600 dark:text-white/70">
          <time>{formatDateLong(new Date(post.data.date))}</time>
          <span aria-hidden="true">·</span>
          <span>{mins} min read</span>
          <span aria-hidden="true">·</span>
          <span>{words} words</span>
        </div>

        <div class="mt-3 flex items-center gap-3">
          {
            post.data.authorAvatar && (
              <img
                src={post.data.authorAvatar}
                alt=""
                width="32"
                height="32"
                class="h-8 w-8 rounded-full border border-gray-200/60 object-cover dark:border-white/10"
                loading="lazy"
                decoding="async"
              />
            )
          }
          <div class="text-sm text-gray-900 dark:text-white/90">
            {post.data.author}
          </div>
        </div>
      </div>

      <div class="prose dark:prose-invert max-w-none px-6 pt-6 pb-8 sm:px-8 sm:pt-8 sm:pb-10">
        <Content />
      </div>

      {
        post.data.cover && typeof post.data.cover !== "string" && post.data.cover.credit && (
          <div class="px-6 pb-6 text-right text-xs text-gray-500 sm:px-8 dark:text-white/50">{post.data.cover.credit}</div>
        )
      }
    </article>
  </section>
</Layout>

<style scoped>
  @view-transition {
    navigation: auto;
  }
</style>
