---
import { getImage, imageConfig, type LocalImageProps, type RemoteImageProps } from 'astro:assets';
import type { UnresolvedImageTransform } from 'node_modules/astro/dist/assets/types';
import type { HTMLAttributes } from 'astro/types';
import 'node_modules/astro/components/image.css';

import fallbackImage from '@/assets/brand/paper.svg';
import { AstroError } from 'node_modules/astro/dist/core/errors/errors';
import { AstroErrorData } from 'node_modules/astro/dist/core/errors';
import { inferRemoteSize } from 'astro/assets/utils';

type Props = LocalImageProps | RemoteImageProps;

const props = Astro.props;

if (props.alt === undefined || props.alt === null) {
  throw new AstroError(AstroErrorData.ImageMissingAlt);
}

if (typeof props.width === 'string') {
  props.width = parseInt(props.width);
}

if (typeof props.height === 'string') {
  props.height = parseInt(props.height);
}

const additionalAttributes: HTMLAttributes<'img'> = {};
try {
  await inferRemoteSize(props.src.toString());
} catch (e) {
  additionalAttributes.class = 'invalid';
  props.src = fallbackImage;
}

const layout = props.layout ?? imageConfig.layout ?? 'none';

if (layout !== 'none') {
  props.layout ??= imageConfig.layout;
  props.fit ??= imageConfig.objectFit ?? 'cover';
  props.position ??= imageConfig.objectPosition ?? 'center';
}

const image = await getImage(props as UnresolvedImageTransform);

if (image.srcSet.values.length > 0) {
  additionalAttributes.srcset = image.srcSet.attribute;
}

if (import.meta.env.DEV) {
  additionalAttributes['data-image-component'] = 'true';
}

const { class: className, ...attributes } = {
  ...additionalAttributes,
  ...image.attributes,
};
---

{/* Applying class outside of the spread prevents it from applying unnecessary astro-* classes */}
<img src={image.src} {...attributes} class={className} />
