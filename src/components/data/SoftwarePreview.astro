---
import { Icon } from "astro-icon/components";

export enum SoftwarePreviewType {
  Info = "Info",
  Download = "Download",
  Javadocs = "Javadocs",
}

interface Props {
  id: string;
  name: string;
  icon: string;
  description?: string;
  type: SoftwarePreviewType;
  eol?: boolean;
}

const { id, name, icon, description, type, eol } = Astro.props;
---

<software-preview data-software={id} data-preview-type={type}>
  <a href="#loading">
    <article
      class="rounded-xl transition-all h-full p-4 md:p-8 hover:shadow-lg hover:bg-primary-300 dark:hover:bg-gray-800"
    >
      <div class="flex flex-row items-center gap-4">
        <div class="rounded-lg w-12 h-12 bg-gray-800 p-3">
          <Icon name={icon} class="w-full h-full" />
        </div>
        <h3 class="font-medium flex-1 flex gap-4 items-center">
          {name}
          {
            eol && (
              <Icon
                name="icons/fontawesome/box-archive"
                class="fill-current h-6"
              />
            )
          }
        </h3>
      </div>

      {
        description && (
          <p class="text-gray-800 dark:text-gray-200 mt-4">{description}</p>
        )
      }
    </article>
  </a>
</software-preview>

<script>
  import { getProject } from "@/utils/fill";

  function stringToSemver(version: string): string {
    return version.match(/(\d+\.\d+\.\d+)/)?.[0] ?? version;
  }

  function cmpVersion(a: string, b: string) {
    const A = stringToSemver(a).split(".").map(Number);
    const B = stringToSemver(b).split(".").map(Number);
    const len = Math.max(A.length, B.length);
    for (let i = 0; i < len; i++) {
      const da = A[i] ?? 0;
      const db = B[i] ?? 0;
      if (da !== db) return da - db;
    }
    return 0;
  }

  function latestVersionFrom(versionsObj: Record<string, string[]>): string {
    const all = Object.values(versionsObj).flat();

    const stable = all.filter((v) => !v.includes("-"));
    const pool = stable.length ? stable : all;

    return pool.sort(cmpVersion).at(-1) ?? "";
  }

  class SoftwarePreview extends HTMLElement {
    async connectedCallback() {
      const { software, previewType } = this.dataset;
      if (!software || !previewType) {
        return;
      }

      const anchor = this.querySelector("a");
      if (!anchor) {
        return;
      }

      switch (previewType) {
        case "Info":
          anchor.href = `/software/${software}`;
          break;
        case "Download":
          anchor.href = `/downloads/${software}`;
          break;
        case "Javadocs":
          const { versions } = await getProject(software);
          const latest = latestVersionFrom(versions);
          if (latest) {
            anchor.href = `https://jd.papermc.io/${software}/${latest}`;
          } else {
            anchor.href = `/software/${software}`;
          }
          break;
      }
    }
  }

  customElements.define("software-preview", SoftwarePreview);
</script>
