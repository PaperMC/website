---
import RemoteResponsiveImageWrapper from "@/components/data/RemoteResponsiveImageWrapper.astro";

interface Props {
  avatarUrl: string;
  name: string;
  link?: string;
}
const { avatarUrl, name, link } = Astro.props;
const Tag = link ? "a" : "div";
const initial = (name?.trim?.()[0] ?? "?").toUpperCase();
---

<Tag
  role={link ? "button" : undefined}
  class="user-image relative flex aspect-square items-center justify-center overflow-hidden rounded-full bg-gray-600 font-bold text-white uppercase transition-transform hover:scale-105 hover:shadow-lg"
  href={link}
  rel={link && "noreferrer"}
  target={link && "_blank"}
  aria-label={name}
  title={name}
>
  <span class="initial pointer-events-none select-none">{initial}</span>

  {
    avatarUrl && (
      <RemoteResponsiveImageWrapper
        alt={`${name}'s avatar`}
        src={avatarUrl}
        width={80}
        height={80}
        loading="lazy"
        decoding="async"
        class="pointer-events-none absolute h-full w-full object-cover"
      />
    )
  }
</Tag>

<style>
  .user-image img.invalid,
  .user-image img[data-fallback="true"] {
    display: none !important;
  }

  .user-image {
    will-change: transform;
    transform: translateZ(0);
    backface-visibility: hidden;
    contain: paint;
  }
  .user-image img {
    display: block;
    border-radius: 9999px;
  }
</style>

<script>
  const root = document.currentScript?.parentElement;
  const img = root?.querySelector("img");
  if (img) {
    if (!img.complete || img.naturalWidth === 0) {
      img.classList.add("invalid");
    }
    img.addEventListener("error", () => img.classList.add("invalid"));
  }
</script>
