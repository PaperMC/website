---

---

<div class="max-h-82 w-120 h-283 rounded-lg bg-gray-800">
  <div class="w-full bg-gray-900 rounded-t-lg flex p-2 gap-2">
    <div class="w-2.5 h-2.5 bg-red-500 rounded-full"></div>
    <div class="w-2.5 h-2.5 bg-yellow-500 rounded-full"></div>
    <div class="w-2.5 h-2.5 bg-green-500 rounded-full"></div>
  </div>
  <div class="max-h-74 p-4 font-mono text-xs text-white overflow-y-hidden flex flex-col-reverse">
    <div id="input"></div>
    <div id="cmdOutput"></div>
    <div id="success"></div>
    <div id="output"></div>
    <div>
      <span class="text-gray-400" id="loading"></span>
    </div>
    <div>
      <span class="text-green-400">$ </span>
      <span class="text-blue-400" id="cmd"></span>
      <span id="args"></span>
    </div>
  </div>
</div>

<template id="info-log-tmpl">
  <style>/* @unocss-placeholder */</style>
  <div>
    <span class="text-amber-400">[<slot name="date" is:inline></slot> INFO]</span>: <slot name="message" is:inline></slot>
  </div>
</template>

<script>
  import { fetchProject } from "@/utils/api";

  customElements.define("info-log", class extends HTMLElement {
    constructor() {
      super();

      const template = (document.getElementById("info-log-tmpl") as HTMLTemplateElement).content;

      const shadowRoot = this.attachShadow({ mode: "open" });
      shadowRoot.appendChild(template.cloneNode(true));
    }
  })

  async function start() {
    const { versions } = await fetchProject("paper");

    const getNaturalDelay = () => Math.floor(Math.random() * 80) + 40;

    const sleep = async (ms: number) => new Promise((r) => setTimeout(r, ms));

    function appendInfoLog(element: HTMLElement, message: string) {
      const formatISOFullTime = (date: Date) => {
        const hour = String(date.getHours()).padStart(2, "0");
        const minute = String(date.getMinutes()).padStart(2, "0");
        const second = String(date.getSeconds()).padStart(2, "0");
        return `${hour}:${minute}:${second}`;
      };

      const infoLog = document.createElement("info-log");

      const dateSpan = document.createElement("span");
      dateSpan.setAttribute("slot", "date");
      dateSpan.textContent = formatISOFullTime(new Date());
      infoLog.appendChild(dateSpan);

      const messageSpan = document.createElement("span");
      messageSpan.setAttribute("slot", "message");
      messageSpan.innerHTML = message;
      infoLog.appendChild(messageSpan);

      element.appendChild(infoLog);
    }

    const outputLines = [
      `Starting minecraft server version ${versions[versions.length - 1]}`,
      'Preparing level "world"',
      "Preparing start region for dimension minecraft:overworld",
      "Time elapsed: 363 ms",
      "Preparing start region for dimension minecraft:the_nether",
      "Time elapsed: 147 ms",
      "Preparing start region for dimension minecraft:the_end",
      "Time elapsed: 366 ms",
      "Running delayed init tasks",
    ];

    for (const char of "java") {
      document.getElementById("cmd")!.innerHTML += char;
      await sleep(getNaturalDelay());
    }

    for (const char of " -jar paper.jar") {
      document.getElementById("args")!.innerHTML += char;
      await sleep(getNaturalDelay());
    }

    for (let i = 0; i < 3; i++) {
      document.getElementById("loading")!.innerHTML = "Loading libraries, please wait" + ".".repeat(i + 1);
      await sleep(500);
    }

    for (let i = 0; i < outputLines.length; i++) {
      appendInfoLog(document.getElementById("output")!, outputLines[i]);
      await sleep(getNaturalDelay());
    }

    appendInfoLog(document.getElementById("success")!, '<span class="text-green-400">Done (2.274s)! For help, type "help"</span>');

    document.getElementById("input")!.innerHTML = `<span>> </span>
           <input id="terminal-input" class="w-105 bg-transparent border-none outline-none">
          `;

    document.getElementById("input")!.addEventListener("keydown", (event) => {
      if (event.key !== "Enter") {
        return;
      }

      const target = event.target as HTMLInputElement;

      let currentCmdOutput = "Redirecting...";
      switch (target.value) {
        case "help":
          currentCmdOutput = "Existing commands: help, downloads, plugins, docs, forums, team, contribute";
          break;
        case "downloads":
          window.location.href = "/downloads";
          break;
        case "plugins":
          window.location.href = "https://hangar.papermc.io";
          break;
        case "docs":
          window.location.href = "https://docs.papermc.io";
          break;
        case "forums":
          window.location.href = "https://forums.papermc.io";
          break;
        case "team":
          window.location.href = "/team";
          break;
        case "contribute":
          window.location.href = "/contribute";
          break;
        default:
          currentCmdOutput = 'Unknown command. Type "help" for help.';
      }

      document.getElementById("cmdOutput")!.innerHTML += `> ${target.value}\n`;
      appendInfoLog(document.getElementById("cmdOutput")!, currentCmdOutput);

      target.value = "";
    });
  }

  await start();
</script>
