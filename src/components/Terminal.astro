---
import { fetchProject } from "../utils/api";
const project = await fetchProject("paper");
---

<div class="max-h-82 w-120 h-283 rounded-lg bg-gray-800">
  <div class="w-full bg-gray-900 rounded-t-lg flex p-2 gap-2">
    <div class="w-2.5 h-2.5 bg-red-500 rounded-full" />
    <div class="w-2.5 h-2.5 bg-yellow-500 rounded-full" />
    <div class="w-2.5 h-2.5 bg-green-500 rounded-full" />
  </div>
  <div class="max-h-74 p-4 font-mono text-xs text-white overflow-y-hidden flex flex-col-reverse">
    <div id="input"></div>
    <div id="cmdOutput"></div>
    <div id="success"></div>
    <div id="output"></div>
    <div>
      <span class="text-gray-400" id="loading"></span>
    </div>
    <div>
      <span class="text-green-400">$ </span>
      <span class="text-blue-400" id="cmd"></span>
      <span id="args"></span>
    </div>
  </div>
</div>

<script defer define:vars={{ versions: project.versions }}>
  start();

  async function start() {
    const getNaturalDelay = () => Math.floor(Math.random() * 80) + 40;
    const formatISOFullTime = (date) => {
      const hour = String(date.getHours()).padStart(2, "0");
      const minute = String(date.getMinutes()).padStart(2, "0");
      const second = String(date.getSeconds()).padStart(2, "0");
      return `${hour}:${minute}:${second}`;
    };
    const sleep = async (ms) => new Promise((r) => setTimeout(r, ms));

    function InfoLog({ children }) {
      return `<div><span class="text-amber-400">[${formatISOFullTime(new Date())} INFO]</span>: ${children}</div>`;
    }

    const outputLines = [
      `Starting minecraft server version ${versions[versions.length - 1]}`,
      "Preparing level \"world\"",
      "Preparing start region for dimension minecraft:overworld",
      "Time elapsed: 363 ms",
      "Preparing start region for dimension minecraft:the_nether",
      "Time elapsed: 147 ms",
      "Preparing start region for dimension minecraft:the_end",
      "Time elapsed: 366 ms",
      "Running delayed init tasks"
    ];

    for (const char of "java") {
      document.getElementById("cmd").innerHTML += char;
      await sleep(getNaturalDelay());
    }

    for (const char of " -jar paper.jar") {
      document.getElementById("args").innerHTML += char;
      await sleep(getNaturalDelay());
    }

    for (let i = 0; i < 3; i++) {
      document.getElementById("loading").innerHTML = "Loading libraries, please wait" + ".".repeat(i + 1);
      await sleep(500);
    }

    for (let i = 0; i < outputLines.length; i++) {
      document.getElementById("output").innerHTML += InfoLog({ children: outputLines[i] }) + "\n";
      await sleep(getNaturalDelay());
    }

    document.getElementById("success").innerHTML = InfoLog({
      children: "<span class=\"text-green-400\">Done (2.274s)! For help, type \"help\"</span>"
    });

    document.getElementById("input").innerHTML = `<span>> </span>
           <input id="terminal-input" class="w-105 bg-transparent border-none outline-none">
          `;

    document.getElementById("input").addEventListener("keydown", (event) => {
      if (event.key !== "Enter") {
        return;
      }
      let currentCmdOutput = "Redirecting...";
      switch (event.target.value) {
        case "help":
          currentCmdOutput = "Existing commands: help, downloads, plugins, docs, forums, team, contribute";
          break;
        case "downloads":
          window.location.href = "/downloads";
          break;
        case "plugins":
          window.location.href = "https://hangar.papermc.io";
          break;
        case "docs":
          window.location.href = "https://docs.papermc.io";
          break;
        case "forums":
          window.location.href = "https://forums.papermc.io";
          break;
        case "team":
          window.location.href = "/team";
          break;
        case "contribute":
          window.location.href = "/contribute";
          break;
        default:
          currentCmdOutput = "Unknown command. Type \"help\" for help.";
      }
      document.getElementById("cmdOutput").innerHTML += `> ${event.target.value}\n` + InfoLog({ children: currentCmdOutput });
      event.target.value = "";
    });
  }
</script>
