---
import { Icon } from 'astro-icon/components';
import Button from '@/components/input/Button.astro';

interface Props {
  id: string;
  name: string;
  icon?: string;
  github?: string;
  eol?: boolean;
}

const { id, name, icon, github, eol } = Astro.props;
---

<software-header data-software={id}>
  <header class="mx-auto flex max-w-7xl flex-row flex-wrap gap-16 px-4 pt-32 pb-26 lg:pt-28 lg:pb-14">
    {
      eol && (
        <div class="-mt-6 w-full rounded-lg bg-red-400 px-4 py-8 text-center font-bold shadow-md dark:bg-red-500">
          {name} has reached end of life! It is no longer maintained or supported.
        </div>
      )
    }
    <div class="flex-1">
      <div class="mb-6 flex flex-row items-center gap-4">
        <div class="h-12 w-12 rounded-lg bg-gray-800 p-3">
          {icon && <Icon name={icon} class="h-full w-full" />}
        </div>
        <h1 class="flex items-center gap-4 text-xl font-medium">
          {name}
          {eol && <Icon name="icons/fontawesome/box-archive" class="h-6 fill-current" />}
        </h1>
      </div>
      <h2 class="text-4xl leading-normal font-medium lg:text-5xl lg:leading-normal">
        <slot name="header" />
      </h2>
      <p class="mt-4 text-xl"><slot name="description" /></p>
      <div class="mt-8 flex flex-row gap-4">
        <Button
          variant="filled"
          href={github ?? `/downloads/${id}`}
          external={Boolean(github)}
          className={eol ? '!hover:bg-red-400 !bg-red-500' : ''}
        >
          {github ? 'GitHub' : 'Downloads'}
        </Button>
        <Button variant="outlined" href={`https://docs.papermc.io/${id}`} external> Documentation </Button>
        <Button variant="outlined" href="#loading" className="jd-link-btn hidden md:block" external> Javadoc </Button>
      </div>
    </div>
    <div class="hidden flex-1 justify-end lg:flex"></div>
  </header>
</software-header>

<script>
  import { getProject } from '@/utils/fill';
  import { latestVersionFrom } from '@/utils/versions';

  class SoftwareHeader extends HTMLElement {
    async connectedCallback() {
      const { software } = this.dataset;
      if (!software) {
        return;
      }

      const button = this.querySelector('.jd-link-btn');
      if (!button) {
        return;
      }

      const { versions } = await getProject(software);
      let latest = latestVersionFrom(versions);

      if (software === 'velocity' && latest.endsWith('-SNAPSHOT')) {
        latest = latest.replace(/-SNAPSHOT$/, '');
      }

      button.setAttribute('href', `https://jd.papermc.io/${software}/${latest}`);
    }
  }

  customElements.define('software-header', SoftwareHeader);
</script>
