---
import { type LocalImageProps, type RemoteImageProps, getImage, imageConfig, inferRemoteSize } from "astro:assets";
import type { UnresolvedImageTransform } from "astro";
import { AstroError, AstroErrorData } from "node_modules/astro/dist/core/errors";
import type { HTMLAttributes } from "astro/types";
import "node_modules/astro/components/image.css";

import fallbackImage from "@/assets/brand/paper.svg";

type Props = LocalImageProps | RemoteImageProps;

const props = Astro.props;

if (props.alt === undefined || props.alt === null) {
  throw new AstroError(AstroErrorData.ImageMissingAlt);
}

if (typeof props.width === "string") {
  props.width = Number.parseInt(props.width);
}

if (typeof props.height === "string") {
  props.height = Number.parseInt(props.height);
}

const additionalAttributes: HTMLAttributes<"img"> = {};
try {
  await inferRemoteSize(props.src.toString());
} catch (e) {
  additionalAttributes.class = "invalid";
  props.src = fallbackImage;
}

const layout = props.layout ?? imageConfig.experimentalLayout ?? "none";
const useResponsive = imageConfig.experimentalResponsiveImages && layout !== "none";

if (useResponsive) {
  // Apply defaults from imageConfig if not provided
  props.layout ??= imageConfig.experimentalLayout;
  props.fit ??= imageConfig.experimentalObjectFit ?? "cover";
  props.position ??= imageConfig.experimentalObjectPosition ?? "center";
}

const image = await getImage(props as UnresolvedImageTransform);

if (image.srcSet.values.length > 0) {
  additionalAttributes.srcset = image.srcSet.attribute;
}

if (import.meta.env.DEV) {
  additionalAttributes["data-image-component"] = "true";
}

const { class: className, ...attributes } = { ...additionalAttributes, ...image.attributes };
---

{/* Applying class outside of the spread prevents it from applying unnecessary astro-* classes */}
<img src={image.src} {...attributes} class={className} />
